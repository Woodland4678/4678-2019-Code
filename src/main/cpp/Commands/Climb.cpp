// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/Climb.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Climb::Climb(int climbLevel): frc::Command() {
    m_climbLevel = climbLevel;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	//Requires(Robot::climber.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

    done = false;
	done2 = false;

}
// Called just before this Command runs the first time
void Climb::Initialize() {
    m_ClimbCase = 0;
}

// Called repeatedly when this Command is scheduled to run
void Climb::Execute() {
    if(Robot::manipulatorArm->ifCargo()||Robot::manipulatorArm->ifHatch()){
        done = true;
        return;
    }

    if (m_climbLevel == true)
        m_ClimbCase = 0;
    else
        m_ClimbCase = 1;
    

    switch (m_ClimbCase) {
        case 0:
            if(!done2)
                done2 = Robot::manipulatorArm->moveToXY(25.0,40.0,-90.0,0,20.0);
            if(done2)
            	done3 = Robot::manipulatorArm->moveToXY(33.0,30.0,-90.0,0,20.0);
            if(done3)
                done = true;
            break;
        case 1:
            if(!done2)
                done2 = Robot::manipulatorArm->moveToXY(33.0,7,-90.0,0,10.0);
            if(!done3)
                done3 = Robot::climber->moveTo(250);
            if(done2 && done3)
                done = true;
            break;
        case 2:
            
            break;
        case 3:
            break;
    }


	
    
}

// Make this return true when this Command no longer needs to run execute()
bool Climb::IsFinished() {
    return done;
}
// Called once after isFinished returns true
void Climb::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Climb::Interrupted() {

}
