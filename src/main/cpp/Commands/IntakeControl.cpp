// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/IntakeControl.h"
#include "frc/GenericHID.h"
#include <frc/SmartDashboard/SmartDashboard.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

IntakeControl::IntakeControl(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void IntakeControl::Initialize() {
    m_finished = false;
}

// Called repeatedly when this Command is scheduled to run
void IntakeControl::Execute() {
    double JoyY(Robot::oi->getdriver()->GetRawAxis(3));

    // Deadzone check
    if (JoyY < 0.05 && JoyY > -0.05) {
        JoyY = 0.0;
    }

    // If direction is pull-in, set indicator that cargo claw is holding cargo.  This
    // is really only relevant in the floor pick up and human station positions.
    // setting a bool in ManipulatorArm to track this.
    if ((Robot::manipulatorArm->getInCargoPosition()) && (JoyY > 0.01))
        Robot::manipulatorArm->setIntakeMode(2); // Mode 2, we have cargo.
    if (JoyY <-0.01) // Cargo ejected
        Robot::manipulatorArm->setIntakeMode(0); // Mode 0, we just spit out the cargo.


    // If direction is push-out, set indicator that cargo claw is no longer holding cargo.
    Robot::manipulatorArm->intakeWheelsSpin(-JoyY);

    m_finished = !Robot::oi->getdriver()->GetRawButton(6);

	// frc::SmartDashboard::PutNumber("Button Pressed = ", m_finished);
    // frc::SmartDashboard::PutNumber("JoyY = ", JoyY);
}

// Make this return true when this Command no longer needs to run execute()
bool IntakeControl::IsFinished() {
    return m_finished;
}

// Called once after isFinished returns true
void IntakeControl::End() {
    Robot::manipulatorArm->intakeWheelsOff();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void IntakeControl::Interrupted() {

}
