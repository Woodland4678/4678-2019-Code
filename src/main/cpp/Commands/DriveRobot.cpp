// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/DriveRobot.h"
#include <math.h>
#include <frc/SmartDashboard/SmartDashboard.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveRobot::DriveRobot(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveRobot::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void DriveRobot::Execute() {
    double JoyX = Robot::oi->getdriver()->GetX();
    double JoyY = Robot::oi->getdriver()->GetY();

    // Deadzone clip
    if(JoyX < 0.05 && JoyX > -0.05) {
        JoyX = 0;
    }

    double leftPower = -(JoyY - 0.75 * JoyX);
    double rightPower = -(JoyY + 0.75 * JoyX);

    // Clip function for the left motor    
    if(std::abs(leftPower - oldLeftPower) > maxChange){
        if(oldLeftPower > 0 && oldLeftPower < leftPower){
            leftPower = oldLeftPower + maxChange;
         }

        if(oldLeftPower < 0 && oldLeftPower > leftPower){
            leftPower = oldLeftPower - maxChange;
        }    
    }

    // Clip function for right motor
    if(std::abs(rightPower - oldRightPower) > maxChange){
        if(oldRightPower > 0 && oldRightPower < rightPower){
            rightPower = oldRightPower + maxChange;
        }

        if(oldRightPower < 0 && oldRightPower > rightPower){
            rightPower = oldRightPower - maxChange;
        }    
    }
 
    // Set old powers for the next time function is called
    oldLeftPower = leftPower;
    oldRightPower = rightPower;
    
    frc::SmartDashboard::PutNumber("left Power: ", leftPower);
    frc::SmartDashboard::PutNumber("right Power: ", rightPower);
 
    Robot::drivetrain->setLeftMotor(leftPower);
    Robot::drivetrain->setRightMotor(rightPower);
}

// Make this return true when this Command no longer needs to run execute()
bool DriveRobot::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void DriveRobot::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveRobot::Interrupted() {

}
