// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/DriveRobot.h"
#include <math.h>
#include <frc/SmartDashboard/SmartDashboard.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveRobot::DriveRobot(): frc::Command() {
    //m_pdp = new frc::PowerDistributionPanel(12);

        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveRobot::Initialize() {}

// Called repeatedly when this Command is scheduled to run
void DriveRobot::Execute() {
    /*frc::SmartDashboard::PutNumber("motor 0", m_pdp->GetCurrent(0));
    frc::SmartDashboard::PutNumber("motor 1", m_pdp->GetCurrent(1));
    frc::SmartDashboard::PutNumber("motor 2", m_pdp->GetCurrent(2));
    frc::SmartDashboard::PutNumber("motor 3", m_pdp->GetCurrent(3));
    frc::SmartDashboard::PutNumber("motor 14", m_pdp->GetCurrent(14));
    frc::SmartDashboard::PutNumber("motor 15", m_pdp->GetCurrent(15));
    frc::SmartDashboard::PutNumber("pdp 5", m_pdp->GetCurrent(5));*/

    double JoyX = Robot::oi->getdriver()->GetX();
    double JoyY = Robot::oi->getdriver()->GetY();
    double JoyZ = JoyY - JoyX;
    int quadrant;

    // Check deadzone

    // Deadzone.
    if (fabs(JoyX) < 0.05 && fabs(JoyY) < 0.05)
        JoyX = 0.0;
    else if (JoyX > 0)
        JoyX -= 0.05;
    else
        JoyX += 0.05;

    if (fabs(JoyY) < 0.05)
        JoyY = 0.0;
    else if (JoyY > 0)
        JoyY -= 0.05;
    else
        JoyY += 0.05;

    // Square (and preserve the sign)
    //double JoyY2 = JoyY * JoyY;
    //if (JoyY < 0)
        //JoyY2 = -JoyY2;
    //double JoyX2 = JoyX * JoyX;
    //if (JoyX < 0)
        //JoyX2 = -JoyX2;

    // Calculate Power Value.
    //double leftPower = -(JoyY2 - JoyX2);
    //double rightPower = -(JoyY2 + JoyX2);

    // Set old powers for the next time function is called
    //m_oldLeftPower = leftPower;
    //m_oldRightPower = rightPower;
    
    //frc::SmartDashboard::PutNumber("left Power: ", leftPower);
    //frc::SmartDashboard::PutNumber("right Power: ", rightPower);
    //Robot::drivetrain->setLeftMotor(leftPower);
    //Robot::drivetrain->setRightMotor(rightPower);
}

// Make this return true when this Command no longer needs to run execute()
bool DriveRobot::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void DriveRobot::End() {}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveRobot::Interrupted() {

}

/*
    // Clip function for the left motor
    if(std::abs(leftPower - m_oldLeftPower) > m_maxChange){
        if(m_oldLeftPower > 0 && m_oldLeftPower < leftPower){ //if robot is moving forward, and accelerating
            leftPower = m_oldLeftPower + m_maxChange;
            frc::SmartDashboard::PutString("left motor status: ", "accel in pos");
        }
        if(m_oldLeftPower < 0 && m_oldLeftPower > leftPower){ //if robot is moving backward, and accelerating
            leftPower = m_oldLeftPower - m_maxChange;
            frc::SmartDashboard::PutString("left motor status: ", "accel in neg");
        }

        if(m_oldLeftPower > 0 && m_oldLeftPower > leftPower && m_oldLeftPower > 0.1){ //if robot is moving forward, and decelerating 
            leftPower = m_oldLeftPower - m_oldLeftPower/10;
            frc::SmartDashboard::PutString("left motor status: ", "decel in pos");
        }

        if(m_oldLeftPower < 0 && m_oldLeftPower < leftPower && m_oldLeftPower < -0.1){ //if robot is moving backward, and decelerating
            leftPower = m_oldLeftPower - m_oldLeftPower/10;
            frc::SmartDashboard::PutString("left motor status: ", "dec in neg");
        }
    }

    // Clip function for right motor
    if(std::abs(rightPower - m_oldRightPower) > m_maxChange){
        if(m_oldRightPower > 0 && m_oldRightPower < rightPower){
            rightPower = m_oldRightPower + m_maxChange;
        }

        if(m_oldRightPower < 0 && m_oldRightPower > rightPower){
            rightPower = m_oldRightPower - m_maxChange;
        }    

        if(m_oldRightPower > 0 && m_oldRightPower > rightPower && m_oldRightPower > 0.1){ //if robot is moving forward, and decelerating 
            rightPower = m_oldRightPower - m_oldRightPower/10;
        }

        if(m_oldRightPower < 0 && m_oldRightPower < rightPower && m_oldRightPower <-0.1){ //if robot is moving backward, and decelerating
            rightPower = m_oldRightPower - m_oldRightPower/10;
        }
    }

    if(rightPower > 0 && leftPower < 0 || rightPower < 0 && leftPower > 0){
        rightPower = rightPower/1.05;
        leftPower = leftPower/1.05;
    }
    */

/*
    // Apply deadzone
    if (JoyX*JoyX + JoyY*JoyY < 0.0025)
        JoyX, JoyY = 0;
    
    // Convert joystick values to motor power
    double leftPower = -(JoyY - 0.75 * JoyX);
    double rightPower = -(JoyY + 0.75 * JoyX);

    // Calculate power difference
    double leftPowerDifference = leftPower - m_oldLeftPower;
    double rightPowerDifference = rightPower - m_oldRightPower;

    // Throttle left motor acceloration
    if (leftPowerDifference > m_maxChange) {

        // if the left motor is travelling forwards and is set to accelorate too fast
        if (leftPower > m_oldLeftPower)
            leftPower = m_oldLeftPower + m_maxChange;

        // if the left motor is travelling backwards and is set to accelorate too fast
        else
            leftPower = m_oldLeftPower - m_maxChange;
    }
    
    // Throttle left motor deccelloration
    else if (leftPowerDifference < -m_maxChange) {

        // if the left motor is travelling forwards and is set to decellorating too fast
        if (leftPower < m_oldLeftPower)
            leftPower = m_oldLeftPower - m_maxChange;
        
        // if the left motor is travelling backwards and is set to decellorating too fast
        else
            leftPower = m_oldLeftPower + m_maxChange;
    }

    // Throttle right motor acceloration
    if (rightPowerDifference > m_maxChange) {

        // if the right motor is travelling forwards and is set to accelorate too fast
        if (rightPower > m_oldRightPower)
            rightPower = m_oldRightPower + m_maxChange;

        //if the right motor is travelling backwards and is set to accelorate too fast
        else
            rightPower = m_oldRightPower - m_maxChange;
    }

    // Throttle right motor deccelloration
    else if (rightPowerDifference < -m_maxChange) {

        // if the right motor is travelling forwards and is set to decellorating too fast
        if (rightPower > m_oldRightPower)
            rightPower = m_oldRightPower - m_maxChange;
        
        // if the right motor is trabelling backwards and is set to decellorating too fast
        else
            rightPower = m_oldRightPower + m_maxChange;
    }

  */  