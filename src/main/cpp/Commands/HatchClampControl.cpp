// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/HatchClampControl.h"
#include "frc/GenericHID.h"
#include <frc/SmartDashboard/SmartDashboard.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

HatchClampControl::HatchClampControl(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void HatchClampControl::Initialize() {
    Robot::manipulatorArm->releaseHatch(); // At start of this, release Hatch Clamp.
    //printf("Release Hatch\n\r");
    m_finished = false;
}

// Called repeatedly when this Command is scheduled to run
void HatchClampControl::Execute() {
    
    m_finished = !Robot::oi->getdriver()->GetRawButton(5);
}

// Make this return true when this Command no longer needs to run execute()
bool HatchClampControl::IsFinished() {
    return m_finished;
}

// Called once after isFinished returns true
void HatchClampControl::End() {
    Robot::manipulatorArm->grabHatch(); // When done, allow grab of hatch clamp again.
    //printf("Grab Hatch\n\r");
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void HatchClampControl::Interrupted() {
        //printf("Hatch Interrupted\n\r");
        Robot::manipulatorArm->grabHatch(); // When done, allow grab of hatch clamp again.

}
