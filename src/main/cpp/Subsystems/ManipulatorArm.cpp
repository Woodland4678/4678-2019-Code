// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/ManipulatorArm.h"
#include "ctre/phoenix.h"
#include "rev/CANSparkMax.h" //test
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../../include/Commands/MoveArm.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ManipulatorArm::ManipulatorArm() : frc::Subsystem("ManipulatorArm") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    waist.reset(new rev::CANSparkMax(6, rev::CANSparkMax::MotorType::kBrushless));
    shoulder.reset(new WPI_TalonSRX(10));
    elbow.reset(new WPI_TalonSRX(8));
    wrist.reset(new WPI_TalonSRX(9));
    intakeWheels.reset(new WPI_VictorSPX(11));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

}

bool ManipulatorArm::Init(){
    shoulder->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 0);
    elbow->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 0);
    wrist->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 0);
}

void ManipulatorArm::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new MoveArm(0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void ManipulatorArm::Periodic() {
    // Put code here to be run every loop

}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

int ManipulatorArm::getShoulderEncoder(){
    return shoulder->GetSelectedSensorPosition(0);
}

int ManipulatorArm::getWristEncoder(){
    return wrist->GetSelectedSensorPosition(0);
}

int ManipulatorArm::getElbowEncoder(){
    return elbow->GetSelectedSensorPosition(0);
}

double ManipulatorArm::getWaistEncoder(){
   return waist->GetEncoder().GetPosition();
}

void ManipulatorArm::getShoulderPID(double p, double i, double d){
    shoulder->Config_kP(0, p, 0);
    shoulder->Config_kI(0, i, 0);
    shoulder->Config_kD(0, d, 0);
}

void ManipulatorArm::getWristPID(double p, double i, double d){
    wrist->Config_kP(0, p, 0);
    wrist->Config_kI(0, i, 0);
    wrist->Config_kD(0, d, 0);
}

void ManipulatorArm::getElbowPID(double p, double i, double d){
    elbow->Config_kP(0, p, 0);
    elbow->Config_kI(0, i, 0);
    elbow->Config_kD(0, d, 0);
}

void ManipulatorArm::getWaistPID(double p, double i, double d){
    waist->GetPIDController().SetP(p);
    waist->GetPIDController().SetI(i);
    waist->GetPIDController().SetD(d);
}

//Intakes
void ManipulatorArm::spinOutward(double power){
    intakeWheels->Set(-power);
}

void ManipulatorArm::spinInward(double power){
    intakeWheels->Set(power);
}