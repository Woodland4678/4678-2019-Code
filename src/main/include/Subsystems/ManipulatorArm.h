// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#ifndef MANIPULATORARM_H
#define MANIPULATORARM_H

#include "frc/commands/Subsystem.h"
#include "frc/WPILib.h"
#include "ctre/phoenix.h"
#include "rev/CANSparkMax.h"
#include <fstream>
#include "Subsystems/Arm/ArmSegment.h"
#include "Subsystems/Arm/Movement.h"

/**
 * @author ExampleAuthor
 */
class ManipulatorArm: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<rev::CANSparkMax> waist;
	std::shared_ptr<WPI_TalonSRX> shoulder;
	std::shared_ptr<WPI_TalonSRX> elbow;
	std::shared_ptr<WPI_TalonSRX> wrist;
	std::shared_ptr<WPI_VictorSPX> intakeWheels;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<frc::AnalogInput> waistPot;
	std::shared_ptr<frc::AnalogInput> shoulderPot;
	std::shared_ptr<frc::AnalogInput> elbowPot;
	std::shared_ptr<frc::AnalogInput> wristPot;

<<<<<<< HEAD
	std::shared_ptr<frc::Servo> hatchServo;

	ArmSegment *m_Segs[3];
=======
	ArmSegment *m_Segs[4];
>>>>>>> 4b93c43931935df01dd8a8be59e624b1be00e789
	ArmMotion *m_Moves[5];
	int m_MotionCase = 0;

	std::ofstream logfile; // stream for writing to file
	char buf[256]; // Buffer for writing data

	int m_Positions[32][3];
	int m_PosCnt = 0;

public:
// constructor
	ManipulatorArm();

// functions
	void InitDefaultCommand() override;
	void Periodic() override;

	bool Init();
	bool moveTo(int pos);

	void addPosition(int shoulderAngle, int elbowAngle, int wristAngle);

	//PID set functions
	void setShoulderPID(double p, double i, double d);
	void setWristPID(double p, double i, double d);
	void setElbowPID(double p, double i, double d);
	void setWaistPID(double p, double i, double d);

	//Movment Functions
	void setShoulderEncoder(int val);
	void setElbowEncoder(int val);
	void setWristEncoder(int val);

	//Reading Encoders
	int getShoulderEncoder();
	int getWristEncoder();
	int getElbowEncoder();
	double getWaistEncoder();
	int getShoulderPot();
	int getElbowPot();
	int getWristPot();

	//Intakes
	void intakeWheelsSpin(double power);
	void intakeWheelsOff();

<<<<<<< HEAD
	void releaseHatch();
	void grabHatch();

	int m_CurrentPosition;
	int m_TargetPosition;
	int m_PrevPosition;
=======
	void openLog();
	void CloseLog();
	
	int m_CurrentPosition = 0;
	int m_TargetPosition = 0;
	int m_PrevPosition = 0;
>>>>>>> 4b93c43931935df01dd8a8be59e624b1be00e789
	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
