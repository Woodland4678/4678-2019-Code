// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "frc/commands/Subsystem.h"
#include "frc/WPILib.h"
#include "rev/CANSparkMax.h"


class Drivetrain: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<rev::CANSparkMax> leftMaster;
	std::shared_ptr<rev::CANSparkMax> leftSlaveOne;
	std::shared_ptr<rev::CANSparkMax> leftSlaveTwo;
	std::shared_ptr<rev::CANSparkMax> rightMaster;
	std::shared_ptr<rev::CANSparkMax> rightSlaveOne;
	std::shared_ptr<rev::CANSparkMax> rightSlaveTwo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
public:
	Drivetrain();
	void InitDefaultCommand() override;
	void Periodic() override;
	void configMotors();
	void setLeftMotor(double power);
	void setRightMotor(double power);
	double getLeftEncoder();
	double getRightEncoder();
	//void test(double power);


	void joystickDriveCalculator();
	double const deadRadiusSquared = 0.05*0.05;		// this is the radius of the deadzone squared
	double const turningFxnCoefficient = 0.5;		// this is the scaller that is used to modify turning

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

};

#endif