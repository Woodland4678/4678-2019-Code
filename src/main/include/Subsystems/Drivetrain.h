// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "frc/commands/Subsystem.h"
#include "frc/WPILib.h"
#include "rev/CANSparkMax.h"
#include "PathFinder/Path.h"
#include "lidar.h"


class Drivetrain: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<rev::CANSparkMax> leftMaster;
	std::shared_ptr<rev::CANSparkMax> leftSlaveOne;
	std::shared_ptr<rev::CANSparkMax> leftSlaveTwo;
	std::shared_ptr<rev::CANSparkMax> rightMaster;
	std::shared_ptr<rev::CANSparkMax> rightSlaveOne;
	std::shared_ptr<rev::CANSparkMax> rightSlaveTwo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	PathFinder *m_Path;
	
public:
	Drivetrain();
	void InitDefaultCommand() override;
	void Periodic() override;
	void configMotors(bool pid, int Maxamps);
	void setLeftMotor(double power);
	void setRightMotor(double power);
	double getLeftEncoder();
	double getRightEncoder();
	void setLeftPosition(double encoder);
	void setRightPosition(double encoder);

	double  percentDone()  const;
	bool goToDistance(double rightCentimeters, double leftCentimeters, double power, int rampUpDistance,
			int rampDownDistance, double startingPower, double endingPower);
	void resetGoToDistanceState();
	bool GyroTurn(double current, double turnAmount,double p, double i, double d);
	
	void setToCoast();
	void setToBrake();

	void initAutoScore();
	int autoScore(int autoType);

	double getLeftSpeed();


	void joystickDriveCalculator();
	double const deadRadiusSquared = 0.05*0.05;		// this is the radius of the deadzone squared
	double const turningFxnCoefficient = 0.7;		// this is the scaller that is used to modify turning

	int goToDistanceState = 0;
	double startingLeftDistance = 0;
	double startingRightDistance = 0;

	int pathCase = 0;
	double encPrevLeft,encPrevRight,encLeft,encRight;
	int traverseCnt = 0;
	// go-to distance variables
	double targetLeft;
	double targetRight;
	double currentLeft;
	double currentRight;
	double currentLeftCentimeters;
	double currentRightCentimeters;
	double leftPercentThere;
	double rightPercentThere;
	double leftMotorMultiplier;
	double rightMotorMultiplier;
	double encoderClicksPerCentimeter = 0.2183; //there were 10.45 clicks per full rotation, and circumference of wheels are 47.879 cm
	double GO_TO_DISTANCE_CORRECTION_SPEED = 5.0;
	double powerOffset;
	double leftPower = 0;
	double rightPower = 0;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	double kr, kl;
	int mtime;
	int as_m_case = 0;
	int as_m_SubCase = 0;
	bool as_move1 = false;
	int as_mode = 0;
	int as_cnt = 0;
	typedef struct moveSeg {
		double pos;
		double vel;
		double acc;
		double heading;
		double x;
		double y;
	}tpSeg;

	double d[400]; 

	double as_angle;
	double as_distance = 0;
	double as_distEnd = 0;
	double as_distWaist = 0;
	double as_PrevAngle = 0;
	double as_PrevDistance = 0;
	double as_initGyro = 0;
	double as_currentGyro = 0;
	double as_PrevGyro = 0;
	double as_ang;
	double as_waist_incr = 0;
	double as_prevWaist = 0;
	int as_lidarScanCount;
	int	as_search_mode = 0; // Differentiate between rocket and cargo/feeder station.
    int targX,targY;
	int as_rocket_score_level = 0; // 0=low, 1=mid, 2=high
    double waistAngle,distFromWaist;
	int as_Servo_cnt = 0;
	int as_cnt_waist = 0;

	bool getNearestBall();
	polarPoint mgb_polarBallPt;
	double mgb_cartX = 0.0; 
	double mgb_cartY = 0.0;
	double mgb_angle = 0.0;
	int mgb_state = 0;
	bool mgb_Move1 = false;
	bool mgb_Move2 = false;
	bool mgb_Move3 = false;
	int mgb_scanCnt = 0;
	int mgb_delayState = 0;
	double mgb_wrist = 0;
	int gb_cnt = 0;

	bool turnAmount(double degrees, int direction, double vel, double acc);
	double mt_acc;
	double mt_vel;
	double mt_tarDeg;
	double mt_tarDir;
	double mt_OEncLeft;
	double mt_OEncRight;
	int mt_state = 0;
	int mt_Cycles = 0;

	bool testPath();
	void initPath();
	int pathState = 0;
	double rEnc = 0;
	double lEnc = 0;
	double rPEnc = 0;
	double lPEnc = 0;
	int tCnt = 0;
	frc::ADXRS450_Gyro *gyro;
	double getGyroAngle();
	void resetGyroValue();
	bool m_driveForward = false;
	double m_gbHeight = 0;
	char buf[256];
};

#endif