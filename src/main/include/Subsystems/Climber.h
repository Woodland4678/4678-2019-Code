// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef CLIMBER_H
#define CLIMBER_H
#include "frc/commands/Subsystem.h"
#include "frc/WPILib.h"
#include "ctre/phoenix.h"


class Climber: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> stilts;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<frc::Servo> rachetServo;
	std::shared_ptr<frc::DigitalInput> rachetDetection;

	double m_StartPosition = 0;

	double m_inchPerCycle = 0;
	double m_EncoderStep = 0;
	double m_encoderPerInch = 0;
	double m_currentEncoder = 0;

	int m_cycles = 0;
	int m_cyclecnt = 0;

	int m_lockCase = 0;
public:
	Climber();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	int readTalonSRXEncoder();
	int readABSEncoder();
	bool moveTo(int step, int total);
	void reset();
	void testMovement();
	bool moveInches(int inches, double inchesPerSecond);

	
	bool lock();
	bool unlock();

	bool m_Climbing = false;
	int m_climbCase = 0;
	int m_target = 0;

	bool m_autoScore = false;

};

#endif
